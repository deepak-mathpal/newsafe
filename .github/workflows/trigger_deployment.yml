name: Trigger Deployment Workflow
on:
  workflow_dispatch:
  repository_dispatch:
    types: jira-event
   
jobs:
  Trigger_Service_Deployment_Workflow:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Trigger Service Deployment Workflow
      id: trigger_workflow
      run: |
        response=$(curl -s -L \
          --fail \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.new }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/deepak-mathpal/noti-service/actions/workflows/noti-deploy-workflow.yml/dispatches \
          -d '{"ref":"main","inputs":{"release_tag":"noti@12344"}}') 
        if [ $? -ne 0 ]; then 
          echo "Failed to trigger workflow" 
          exit 1 
        fi
          echo "Triggered workflow response: $response"
  
        # Fetch the workflow runs triggered by the dispatch event
        TARGET_REPO="deepak-mathpal/noti-service"
        WORKFLOW_ID="noti-deploy-workflow.yml"
        TOKEN="${{ secrets.new }}"
  
        echo "Fetching workflow run details..."
        sleep 5  # Allow time for the workflow to start
        run_data=$(curl -s -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $TOKEN" \
          "https://api.github.com/repos/$TARGET_REPO/actions/workflows/$WORKFLOW_ID/runs?branch=main&event=workflow_dispatch")
        
        run_id=$(echo "$run_data" | jq -r '.workflow_runs | sort_by(.created_at) | reverse | .[0].id')
        echo "Triggered workflow run_id: $run_id"
        echo "::set-output name=run_id::$run_id"
  
    - name: Wait for Workflow Completion
      id: wait_workflow
      run: |
        TARGET_REPO="deepak-mathpal/noti-service"
        TOKEN="${{ secrets.new }}"
        RUN_ID="${{ steps.trigger_workflow.outputs.run_id }}"
        POLL_INTERVAL=10
        MAX_RETRIES=50
        retries=0
        while [ $retries -lt $MAX_RETRIES ]; do
          echo "Checking workflow status for run_id: $RUN_ID..."
          response=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/actions/runs/$RUN_ID")
          if [ "$(echo "$response" | jq -r '.status')" == "error" ]; then 
            echo "::error::Failed to fetch workflow status" 
              exit 1 
          fi
          status=$(echo "$response" | jq -r '.status')
          conclusion=$(echo "$response" | jq -r '.conclusion')
          echo "Status: $status, Conclusion: $conclusion"
          if [ "$status" == "completed" ]; then
            if [ "$conclusion" == "success" ]; then
              echo "Workflow completed successfully!"
              exit 0
            else
              echo "Workflow failed with conclusion: $conclusion"
              exit 1
            fi
          fi
          echo "Workflow not finished yet. Retrying in $POLL_INTERVAL seconds..."
          sleep $POLL_INTERVAL
          retries=$((retries + 1))
        done
        echo "Workflow did not complete within the timeout."
        exit 1

    - name: update the cr
      run: |
        python -m pip install --upgrade pip
        echo "${{ github.event.client_payload.jira_id }}"
        python python_files/update_jira_ticket.py --jira_user ${{secrets.jira_user}} --jira_key ${{secrets.jira_key}} --jira_ticket_id "${{ github.event.client_payload.jira_id }}" --status "complete" 
